### User Management API Testing
### Base URL
@baseUrl = http://localhost:5276
@token = YOUR_TOKEN_HERE

### ====================================
### Authentication Endpoints
### ====================================

### 1. Login as Admin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin@evstation.com",
  "password": "admin123"
}

### 2. Login with Invalid Credentials (should fail)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin@evstation.com",
  "password": "wrongpassword"
}

### ====================================
### User Management Endpoints (Backoffice Only)
### ====================================

### 3. Get All Users (includes lastLogin field)
GET {{baseUrl}}/api/users
Authorization: Bearer {{token}}

### 4. Get User by ID
@userId = 67012abc123456789
GET {{baseUrl}}/api/users/{{userId}}
Authorization: Bearer {{token}}

### 5. Create New User (Station Operator)
POST {{baseUrl}}/api/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "John",
  "lastName": "Operator",
  "email": "operator1@evstation.com",
  "phoneNumber": "+94771234567",
  "address": "123 Station Street, Colombo",
  "password": "password123",
  "role": 1
}

### 6. Create New User (Backoffice)
POST {{baseUrl}}/api/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "Jane",
  "lastName": "Admin",
  "email": "admin2@evstation.com",
  "phoneNumber": "+94779876543",
  "address": "456 Admin Avenue, Kandy",
  "password": "admin123",
  "role": 0
}

### 7. Create User with Invalid Data (should fail)
POST {{baseUrl}}/api/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "A",
  "lastName": "B",
  "email": "invalid-email",
  "phoneNumber": "123",
  "password": "123",
  "role": 99
}

### 8. Update User (Basic Info Only - No Password Required)
@updateUserId = 67012abc123456789
PUT {{baseUrl}}/api/users/{{updateUserId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "John",
  "lastName": "UpdatedOperator",
  "email": "operator1_new@evstation.com",
  "phoneNumber": "+94771111111",
  "role": 1
}

### 9. Update User Password (Optional in main update)
@passwordUserId = 67012abc123456789
PUT {{baseUrl}}/api/users/{{passwordUserId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "password": "newpassword123"
}

### 10. Update User Role Only (0=Backoffice, 1=StationOperator)
@roleUserId = 67012abc123456789
PUT {{baseUrl}}/api/users/{{roleUserId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role": 0
}

### 11. Deactivate User
@deactivateUserId = 67012abc123456789
PATCH {{baseUrl}}/api/users/{{deactivateUserId}}/deactivate
Authorization: Bearer {{token}}

### 12. Reactivate User
@reactivateUserId = 67012abc123456789
PATCH {{baseUrl}}/api/users/{{reactivateUserId}}/reactivate
Authorization: Bearer {{token}}

### 13. Reset User Password
@resetPasswordUserId = 67012abc123456789
PATCH {{baseUrl}}/api/users/{{resetPasswordUserId}}/reset-password
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "newPassword": "newresetpassword123"
}

### ====================================
### Error Cases
### ====================================

### 14. Access Protected Endpoint Without Token (should fail with 401)
GET {{baseUrl}}/api/users

### 15. Access Protected Endpoint With Invalid Token (should fail with 401)
GET {{baseUrl}}/api/users
Authorization: Bearer invalid_token_here

### 16. Create User with Duplicate Email (should fail with 409)
POST {{baseUrl}}/api/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "New",
  "lastName": "Admin",
  "email": "admin@evstation.com",
  "phoneNumber": "+94771234567",
  "password": "password123",
  "role": 1
}

### 17. Get Non-Existent User (should fail with 404)
GET {{baseUrl}}/api/users/000000000000000000000000
Authorization: Bearer {{token}}

### 18. Test LastLogin Update - Login and Check User
# First login to update lastLogin
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin@evstation.com",
  "password": "password"
}

# Then get user to see updated lastLogin
GET {{baseUrl}}/api/users
Authorization: Bearer {{token}}

### ====================================
### Testing Workflow
### ====================================
### 
### INSTRUCTIONS:
### 1. Start the API: dotnet run
### 2. Create initial admin user in MongoDB (see QUICK_START_GUIDE.md)
### 3. Run test #1 (Login as Admin)
### 4. Copy the token from the response
### 5. Replace {{token}} variable at the top with actual token
### 6. Run other tests with the token
###
### ====================================

